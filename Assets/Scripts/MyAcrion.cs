//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/MyAcrion.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MyAcrion : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MyAcrion()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MyAcrion"",
    ""maps"": [
        {
            ""name"": ""map"",
            ""id"": ""08064f1f-53f9-415e-9edd-80012e2282b7"",
            ""actions"": [
                {
                    ""name"": ""actionA"",
                    ""type"": ""Button"",
                    ""id"": ""ab0374c0-144e-4cf9-a51e-54145ebe0351"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""actionD"",
                    ""type"": ""Button"",
                    ""id"": ""342a335f-b980-4865-978f-16d821684205"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""28003944-0ed2-4041-8717-4a42ef652d56"",
                    ""path"": ""<Keyboard>/#(A)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""actionA"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4b71de55-0f00-4633-8fea-4c631b0301e9"",
                    ""path"": ""<Keyboard>/#(D)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""actionD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // map
        m_map = asset.FindActionMap("map", throwIfNotFound: true);
        m_map_actionA = m_map.FindAction("actionA", throwIfNotFound: true);
        m_map_actionD = m_map.FindAction("actionD", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // map
    private readonly InputActionMap m_map;
    private IMapActions m_MapActionsCallbackInterface;
    private readonly InputAction m_map_actionA;
    private readonly InputAction m_map_actionD;
    public struct MapActions
    {
        private @MyAcrion m_Wrapper;
        public MapActions(@MyAcrion wrapper) { m_Wrapper = wrapper; }
        public InputAction @actionA => m_Wrapper.m_map_actionA;
        public InputAction @actionD => m_Wrapper.m_map_actionD;
        public InputActionMap Get() { return m_Wrapper.m_map; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MapActions set) { return set.Get(); }
        public void SetCallbacks(IMapActions instance)
        {
            if (m_Wrapper.m_MapActionsCallbackInterface != null)
            {
                @actionA.started -= m_Wrapper.m_MapActionsCallbackInterface.OnActionA;
                @actionA.performed -= m_Wrapper.m_MapActionsCallbackInterface.OnActionA;
                @actionA.canceled -= m_Wrapper.m_MapActionsCallbackInterface.OnActionA;
                @actionD.started -= m_Wrapper.m_MapActionsCallbackInterface.OnActionD;
                @actionD.performed -= m_Wrapper.m_MapActionsCallbackInterface.OnActionD;
                @actionD.canceled -= m_Wrapper.m_MapActionsCallbackInterface.OnActionD;
            }
            m_Wrapper.m_MapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @actionA.started += instance.OnActionA;
                @actionA.performed += instance.OnActionA;
                @actionA.canceled += instance.OnActionA;
                @actionD.started += instance.OnActionD;
                @actionD.performed += instance.OnActionD;
                @actionD.canceled += instance.OnActionD;
            }
        }
    }
    public MapActions @map => new MapActions(this);
    public interface IMapActions
    {
        void OnActionA(InputAction.CallbackContext context);
        void OnActionD(InputAction.CallbackContext context);
    }
}
